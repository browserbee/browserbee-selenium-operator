{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>BrowserBee\u00a0Selenium\u00a0Operator is a Kubernetes\u2011native solution that lets you define, deploy, and scale Selenium\u00a0Grid resources using Custom Resource Definitions\u00a0(CRDs). Manage your browser\u2011automation infrastructure the same way you manage the rest of your cloud\u2011native stack\u2014declaratively, version\u2011controlled, and GitOps\u2011friendly.</p> <p>Whether you are experimenting locally or orchestrating hundreds of parallel test sessions in production, this documentation will guide you from first cluster to advanced tuning.</p>"},{"location":"#why-browserbee-selenium-operator","title":"Why BrowserBee Selenium Operator?","text":"Challenge Traditional Approach Operator Advantage Environment drift Hand\u2011crafted YAML or imperative <code>kubectl</code> commands Declarative CRDs version\u2011controlled in Git Upgrades &amp; scaling Manual image bumps and replica tweaks Reconciliation loop keeps desired state Developer onboarding Tribal knowledge &amp; runbooks One\u2011liner <code>kubectl apply</code> installs Grid Multi\u2011cluster adoption Re\u2011implement configs per cluster Re\u2011use the same CRDs everywhere <p>DX\u00a0Tip\u00a0\ud83d\udee0\ufe0f Store your CRDs in the same repo as your application code and let Argo\u00a0CD or Flux apply them automatically. This turns Selenium\u00a0Grid changes into pull\u2011request reviews, CI checks, and instant rollbacks.</p>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>flowchart TD\n    subgraph Kubernetes Cluster\n        direction LR\n        Operator[\"BrowserBee&lt;br&gt;Selenium\u00a0Operator\"]\n        CRD[SeleniumGrid\u00a0CRD]\n        Hub[Selenium\u00a0Hub Deployment]\n        Nodes[Selenium\u00a0Node StatefulSets]\n    end\n    Operator -- watches --&gt; CRD\n    Operator -- manages --&gt; Hub &amp; Nodes\n</code></pre> <ul> <li>The Operator reconciles every <code>SeleniumGrid</code> CR instance.</li> <li>A Hub deployment receives session requests.</li> <li>One or more Node StatefulSets register with the Hub to execute browser sessions.</li> </ul>"},{"location":"#quick-start","title":"Quick\u00a0Start","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>kubectl \u2265\u00a01.25</li> <li>kind \u2265\u00a00.20 (or any Kubernetes\u00a01.25+ cluster)</li> </ul>"},{"location":"#1-create-a-local-cluster","title":"1\u00a0\u2014\u00a0Create a local cluster","text":"<pre><code>kind create cluster --name selenium-cluster\n</code></pre>"},{"location":"#2-install-the-operator","title":"2\u00a0\u2014\u00a0Install the Operator","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/main/manifests/install.yaml\n</code></pre> <p>This installs all components in the <code>browserbee-selenium-operator-system</code> namespace.</p> <p>DX\u00a0Tip\u00a0\ud83d\udee0\ufe0f Watch the rollout live: <code>kubectl -n browserbee-selenium-operator-system get pods -w</code></p>"},{"location":"#3-spin-up-a-selenium-grid","title":"3\u00a0\u2014\u00a0Spin up a Selenium\u00a0Grid","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/main/manifests/selenium-grid/install.yaml\n</code></pre>"},{"location":"#4-verify","title":"4\u00a0\u2014\u00a0Verify","text":"<pre><code>kubectl get seleniumgrids\nkubectl get svc selenium-hub -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'\n</code></pre> <p>Open the Grid console in your browser and start testing!</p>"},{"location":"#example-manifests","title":"Example\u00a0Manifests","text":"<p>Use the ready\u2011made samples to get productive in seconds:</p> Example Description <code>selenium-grid.yaml</code> Full Selenium\u00a0Grid with Chrome &amp; Firefox nodes <code>selenium-test.yaml</code> Kubernetes\u00a0Job that runs a simple Selenium test <pre><code>kubectl apply -f examples/selenium-grid.yaml\nkubectl apply -f examples/selenium-test.yaml\n</code></pre> <p>Productivity\u00a0Hint\u00a0\ud83d\ude80 Parametrize these manifests with Helm or Kustomize to reuse them across environments.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Declarative CRDs\u00a0\u2014 define Hub, Nodes, browser versions, and autoscaling rules in YAML.</li> <li>Zero\u2011downtime upgrades\u00a0\u2014 rolling updates handled by the Operator.</li> <li>Autoscaling\u00a0\u2014 integrate with the Kubernetes Horizontal Pod Autoscaler.</li> <li>Multi\u2011version support\u00a0\u2014 run multiple browser versions side\u2011by\u2011side.</li> <li>Metrics &amp; observability\u00a0\u2014 scrape Prometheus metrics out\u2011of\u2011the\u2011box; dashboards included.</li> <li>Extensible\u00a0\u2014 add custom node images, sidecars, or plugins via standard Kubernetes patterns.</li> </ul>"},{"location":"#next-steps","title":"Next\u00a0Steps","text":"<ol> <li>Helm\u00a0Chart\u00a0\u2014 package your Grid and ship it to any cluster.</li> <li>GitOps\u00a0\u2014 integrate with Argo\u00a0CD or Flux for continuous delivery.</li> <li>CI Integration\u00a0\u2014 point your test runners to the Grid service endpoint.</li> <li>Observability\u00a0\u2014 import the provided Grafana dashboards and alerting rules.</li> </ol>"},{"location":"#community-support","title":"Community\u00a0&amp;\u00a0Support","text":"<ul> <li>Slack: Join the conversation and get help from maintainers.</li> <li>GitHub\u00a0Discussions: Ask questions, propose features, and share tips.</li> <li>Contributing\u00a0Guide: PRs welcome! See <code>CONTRIBUTING.md</code>.</li> </ul>    Not affiliated with the official SeleniumHQ project."}]}