{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>BrowserBee Selenium Operator is a Kubernetes\u2011native solution that lets you define, deploy, and scale Selenium Grid resources using Custom Resource Definitions (CRDs). Manage your browser\u2011automation infrastructure the same way you manage the rest of your cloud\u2011native stack\u2014declaratively, version\u2011controlled, and GitOps\u2011friendly.</p> <p>Whether you are experimenting locally or orchestrating hundreds of parallel test sessions in production, this documentation will guide you from first cluster to advanced tuning.</p>"},{"location":"#why-browserbee-selenium-operator","title":"Why BrowserBee Selenium Operator?","text":"Challenge Traditional Approach Operator Advantage Environment drift Hand\u2011crafted YAML or imperative <code>kubectl</code> commands Declarative CRDs version\u2011controlled in Git Upgrades &amp; scaling Manual image bumps and replica tweaks Reconciliation loop keeps desired state Developer onboarding Tribal knowledge &amp; runbooks One\u2011liner <code>kubectl apply</code> installs Grid Multi\u2011cluster adoption Re\u2011implement configs per cluster Re\u2011use the same CRDs everywhere <p>DX Tip\ufe0f Store your CRDs in the same repo as your application code and let Argo CD or Flux apply them automatically. This turns Selenium Grid changes into pull\u2011request reviews, CI checks, and instant rollbacks.</p>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>flowchart TD\n    subgraph Kubernetes Cluster\n        direction LR\n        Operator[\"BrowserBee&lt;br&gt;Selenium Operator\"]\n        CRD[SeleniumGrid CRD]\n        Hub[Selenium Hub Deployment]\n        Nodes[Selenium Node StatefulSets]\n    end\n    Operator -- watches --&gt; CRD\n    Operator -- manages --&gt; Hub &amp; Nodes\n</code></pre> <ul> <li>The Operator reconciles every <code>SeleniumGrid</code> CR instance.</li> <li>A Hub deployment receives session requests.</li> <li>One or more Node StatefulSets register with the Hub to execute browser sessions.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>kubectl \u2265 1.25</li> <li>kind \u2265 0.20 (or any Kubernetes 1.25+ cluster)</li> </ul>"},{"location":"#1-create-a-local-cluster","title":"1 \u2014 Create a local cluster","text":"<pre><code>kind create cluster --name selenium-cluster\n</code></pre>"},{"location":"#2-install-the-operator","title":"2 \u2014 Install the Operator","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/main/manifests/install.yaml\n</code></pre> <p>This installs all components in the <code>browserbee-selenium-operator-system</code> namespace.</p> <p>Tip\ufe0f Watch the rollout live: <code>kubectl -n browserbee-selenium-operator-system get pods -w</code></p>"},{"location":"#3-spin-up-a-selenium-grid","title":"3 \u2014 Spin up a Selenium Grid","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/main/manifests/selenium-grid/install.yaml\n</code></pre>"},{"location":"#4-verify","title":"4 \u2014 Verify","text":"<pre><code>kubectl get seleniumgrids\nkubectl get svc selenium-hub -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'\n</code></pre> <p>Open the Grid console in your browser and start testing!</p>"},{"location":"#manifests","title":"Manifests","text":"<p>Use the ready\u2011made samples to get productive in seconds:</p> Example Description <code>selenium-grid.yaml</code> Full Selenium Grid with hub, Chrome &amp; Firefox nodes <code>selenium-hub.yaml</code> Kubernetes deployment that runs a Selenium hub <code>selenium-node.yaml</code> Kubernetes deployment that runs a Selenium node <code>selenium-standalone.yaml</code> Kubernetes deployment that runs a Selenium standalone node"},{"location":"#selenium-grid","title":"Selenium Grid","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/refs/heads/main/config/samples/selenium-grid_v1_seleniumgrid.yaml\n</code></pre>"},{"location":"#selenium-hub","title":"Selenium Hub","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/refs/heads/main/config/samples/selenium-hub_v1_seleniumhub.yaml\n</code></pre>"},{"location":"#selenium-node","title":"Selenium Node","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/refs/heads/main/config/samples/selenium-node_v1_seleniumnode.yaml\n</code></pre>"},{"location":"#selenium-standalone-node","title":"Selenium Standalone Node","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/refs/heads/main/config/samples/selenium-standalone_v1_seleniumstandalone.yaml\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Declarative CRDs \u2014 define Hub, Nodes, browser versions, and autoscaling rules in YAML.</li> <li>Zero\u2011downtime upgrades \u2014 rolling updates handled by the Operator.</li> <li>Autoscaling \u2014 integrate with the Kubernetes Horizontal Pod Autoscaler.</li> <li>Multi\u2011version support \u2014 run multiple browser versions side\u2011by\u2011side.</li> <li>Metrics &amp; observability - scrape Prometheus metrics out\u2011of\u2011the\u2011box; dashboards included.</li> <li>Extensible \u2014 add custom node images, sidecars, or plugins via standard Kubernetes patterns.</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ol> <li>Helm Chart \u2014 package your Grid and ship it to any cluster.</li> <li>GitOps \u2014 integrate with Argo CD or Flux for continuous delivery.</li> <li>CI Integration \u2014 point your test runners to the Grid service endpoint.</li> <li>Observability \u2014 import the provided Grafana dashboards and alerting rules.</li> </ol>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>Slack: Join the conversation and get help from maintainers.</li> <li>GitHub Discussions: Ask questions, propose features, and share tips.</li> <li>Contributing Guide: PRs welcome! See <code>CONTRIBUTING.md</code>.</li> </ul>    Not affiliated with the official SeleniumHQ project."},{"location":"concepts/declarative-testing/","title":"Declarative Testing","text":"<p>Declarative testing with the BrowserBee Selenium Operator lets you define browser workflows using Kubernetes-native YAML \u2014 based on the Selenium Workflow Specification. This approach treats browser tests as infrastructure, making them versioned, composable, and automation-ready.</p>"},{"location":"concepts/declarative-testing/#what-is-declarative-selenium-testing","title":"What Is Declarative Selenium Testing?","text":"<p>Declarative testing is the practice of defining what to test (e.g., click this, assert that) in a structured way, instead of writing imperative test code in Python or Java. You express the desired workflow in a <code>SeleniumWorkflow</code> YAML Custom Resource, and the operator handles browser automation behind the scenes.</p>"},{"location":"concepts/declarative-testing/#why-use-declarative-selenium-tests","title":"Why Use Declarative Selenium Tests?","text":"<ul> <li>No test scripts required \u2014 YAML does the work.</li> <li>CI/CD and GitOps friendly \u2014 version, diff, and review tests in pull requests.</li> <li>Portable \u2014 define tests once, run them on any Kubernetes cluster.</li> <li>Reusable patterns \u2014 easily compose common UI flows.</li> </ul>"},{"location":"concepts/declarative-testing/#specification-overview","title":"\ud83d\udd27 Specification Overview","text":"<p>A <code>SeleniumWorkflow</code> is defined using the following fields:</p>"},{"location":"concepts/declarative-testing/#webdriver-required","title":"<code>webDriver</code> (required)","text":"Field Type Description <code>browser</code> string One of: <code>chrome</code>, <code>firefox</code>, <code>edge</code>, <code>safari</code> <code>headless</code> boolean Run in headless mode <code>implicitWait</code> int Wait time (seconds) for finding elements <code>remoteURL</code> string Full WebDriver URL (e.g. from Selenium Grid) <code>windowSize</code> object Pixel width and height of browser window <code>capabilities</code> object Custom capabilities passed to the driver"},{"location":"concepts/declarative-testing/#actions-required","title":"<code>actions</code> (required)","text":"<p>A list of test steps to execute in order.</p> Field Required Description <code>name</code> \u2705 Unique name of the action <code>action</code> \u2705 One of: <code>navigate</code>, <code>input</code>, <code>click</code>, <code>assert</code>, <code>screenshot</code> <code>target</code> \ud83d\udeab (only for <code>navigate</code>) URL to open <code>selector</code> \ud83d\udeab (for <code>click</code>, <code>input</code>, <code>assert</code>) How to locate elements <code>value</code> \ud83d\udeab (for <code>input</code>, <code>assert</code>) Value to send or verify <code>expected</code> \ud83d\udeab (for <code>assert</code>) Expected value <code>condition</code> \ud83d\udeab (for <code>assert</code>) <code>equals</code>, <code>contains</code>, <code>notEquals</code>, <code>exists</code>"},{"location":"concepts/declarative-testing/#full-yaml-example","title":"\u2705 Full YAML Example","text":"<p>```yaml apiVersion: browserbee.io/v1 kind: SeleniumWorkflow metadata:   name: login-flow spec:   description: \"Test login and dashboard redirect\"   webDriver:     browser: chrome     headless: true     implicitWait: 5     remoteURL: http://selenium-hub.selenium:4444/wd/hub     windowSize:       width: 1280       height: 800     capabilities:       timezone: \"UTC\"   actions:     - name: open-login       action: navigate       target: \"https://example.com/login\"</p> <pre><code>- name: input-username\n  action: input\n  selector:\n    strategy: id\n    value: username\n  value: \"testuser\"\n\n- name: input-password\n  action: input\n  selector:\n    strategy: id\n    value: password\n  value: \"secure123\"\n\n- name: click-submit\n  action: click\n  selector:\n    strategy: css\n    value: \"#submit-login\"\n\n- name: assert-dashboard\n  action: assert\n  selector:\n    strategy: css\n    value: \"h1.dashboard\"\n  expected: \"Welcome\"\n  condition: contains\n\n- name: take-screenshot\n  action: screenshot\n</code></pre>"},{"location":"quickstart/installation/","title":"Installation Guide","text":"<p>This guide walks you through installing the BrowserBee Selenium Operator on any Kubernetes cluster.</p> <p>\ud83d\udca1 The operator enables you to manage browser automation workflows and Selenium Grids declaratively using Kubernetes CRDs.</p>"},{"location":"quickstart/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing, ensure the following tools are available on your system:</p> Tool Purpose Install Link <code>kubectl</code> Interact with your Kubernetes cluster Install kubectl <code>kustomize</code> Customize Kubernetes resource manifests Install kustomize <code>Docker</code> (Optional) Build/push custom operator images Install Docker A Cluster Any local (Kind, Minikube) or remote K8s cluster \u2014"},{"location":"quickstart/installation/#installation-steps","title":"Installation Steps","text":""},{"location":"quickstart/installation/#1-clone-the-operator-repository","title":"1. Clone the Operator Repository","text":"<p>Get the latest version of the BrowserBee Selenium Operator:</p> <pre><code>git clone https://github.com/browserbee/browserbee-selenium-operator.git\ncd browserbee-selenium-operator\n</code></pre>"},{"location":"quickstart/installation/#2-install-custom-resource-definitions-crds","title":"2. Install Custom Resource Definitions (CRDs)","text":"<p>Apply the CRDs that define <code>SeleniumGrid</code>, <code>SeleniumWorkflow</code>, and other custom resources:</p> <pre><code>kubectl apply -k config/crd/bases\n</code></pre> <p>This ensures Kubernetes knows about the new resource types the operator will manage.</p>"},{"location":"quickstart/installation/#3-deploy-the-operator","title":"3. Deploy the Operator","text":"<p>Install the controller manager that runs the reconciliation logic:</p> <pre><code>kubectl apply -f manifests/install.yaml\n</code></pre> <p>You can customize the namespace, image tag, or controller settings using Kustomize overlays.</p>"},{"location":"quickstart/installation/#4-verify-the-installation","title":"4. Verify the Installation","text":"<p>Confirm the operator pod is running:</p> <pre><code>kubectl get pods -n browserbee-system\n</code></pre> <p>Expected output:</p> <pre><code>NAME                                                  READY   STATUS    RESTARTS   AGE\nbrowserbee-selenium-operator-controller-manager-xyz   1/1     Running   0          30s\n</code></pre> <p>If needed, view logs with:</p> <pre><code>kubectl logs -n browserbee-system deployment/browserbee-selenium-operator-controller-manager\n</code></pre>"},{"location":"quickstart/installation/#post-install-check","title":"Post-Install Check","text":"<p>To test that everything is working, try creating a minimal SeleniumGrid:</p> <pre><code>apiVersion: browserbee.io/v1alpha1\nkind: SeleniumGrid\nmetadata:\n  name: quickstart-grid\nspec:\n  hub:\n    replicas: 1\n  nodes:\n    chrome:\n      replicas: 2\n</code></pre> <p>Apply it with:</p> <pre><code>kubectl apply -f examples/selenium-grid.yaml\n</code></pre> <p>Check resources:</p> <pre><code>kubectl get pods -l app=selenium-grid\n</code></pre>"},{"location":"quickstart/installation/#whats-next","title":"What\u2019s Next?","text":"<p>Now that your operator is up and running, try one of the quickstart workflows:</p> <ul> <li>Create Your First Selenium Grid</li> <li>Define and Run Declarative Selenium Tests</li> </ul>"},{"location":"quickstart/installation/#advanced-setup-optional","title":"Advanced Setup (Optional)","text":"<ul> <li>Helm-based installation (coming soon)</li> <li>Deploy with Ingress support</li> <li>Secure the operator with RBAC and TLS</li> </ul>"},{"location":"quickstart/selenium-grid/","title":"Selenium Grid with BrowserBee","text":"<p>Selenium Grid is a core component of the BrowserBee Selenium Operator, enabling scalable, cross-browser test execution inside Kubernetes. It allows you to distribute Selenium tests across multiple containers (called nodes) managed by a central hub.</p> <p>With BrowserBee, Selenium Grid becomes fully declarative, GitOps-friendly, and cloud-native.</p>"},{"location":"quickstart/selenium-grid/#key-features","title":"Key Features","text":"<ul> <li>Parallel Testing: Run many tests simultaneously across distributed browser nodes.</li> <li>Cross-Browser Coverage: Support for Chrome, Firefox, and Edge (with more coming soon).</li> <li>Dynamic Scaling: Add or remove nodes based on load using simple CR edits.</li> <li>Centralized Hub: A controller (hub) routes all test requests to matching nodes.</li> </ul>"},{"location":"quickstart/selenium-grid/#deploying-a-selenium-grid","title":"Deploying a Selenium Grid","text":""},{"location":"quickstart/selenium-grid/#1-apply-the-sample-grid","title":"1. Apply the Sample Grid","text":"<p>Create a simple Grid with 1 hub and 2 Chrome nodes:</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/main/config/samples/selenium-grid_v1_seleniumgrid.yaml\n</code></pre> <p>This YAML is a <code>SeleniumGrid</code> CRD managed by the operator.</p>"},{"location":"quickstart/selenium-grid/#2-check-grid-status","title":"2. Check Grid Status","text":"<p>Verify the grid has been created successfully:</p> <pre><code>kubectl get seleniumgrids\n</code></pre> <p>You should see a CR with status fields indicating readiness (depending on operator version).</p>"},{"location":"quickstart/selenium-grid/#3-access-the-selenium-grid-console","title":"3. Access the Selenium Grid Console","text":"<p>To use the Selenium Hub:</p> <pre><code>kubectl get svc selenium-hub -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'\n</code></pre> <p>Open the resulting URL in your browser to access the Selenium Console UI.</p> <p>\ud83d\udca1 Tip: If you're using a local cluster like Kind or Minikube, you may need to expose the hub using a <code>NodePort</code> or <code>Ingress</code>.</p>"},{"location":"quickstart/selenium-grid/#customize-your-grid","title":"Customize Your Grid","text":"<p>You can fully configure the grid by modifying the CR\u2019s <code>spec</code> section. Below is a multi-browser setup example:</p> <pre><code>apiVersion: selenium-grid.browserbee.io/v1\nkind: SeleniumGrid\nmetadata:\n  name: cross-browser-grid\nspec:\n  hub:\n    replicas: 1\n  nodes:\n    - browser: chrome\n      replicas: 3\n    - browser: firefox\n      replicas: 2\n    - browser: edge\n      replicas: 1\n</code></pre> <p>Apply your changes:</p> <pre><code>kubectl apply -f custom-grid.yaml\n</code></pre> <p>Each node runs the appropriate WebDriver image with the right browser preinstalled.</p>"},{"location":"quickstart/selenium-grid/#monitoring-scaling","title":"Monitoring &amp; Scaling","text":""},{"location":"quickstart/selenium-grid/#monitoring","title":"Monitoring","text":"<p>Integrate with Prometheus + Grafana for real-time visibility into:</p> <ul> <li>Pod health</li> <li>Browser session usage</li> <li>Response latency</li> </ul> <p>BrowserBee emits standard Kubernetes metrics for all Grid components.</p>"},{"location":"quickstart/selenium-grid/#scaling-the-grid","title":"Scaling the Grid","text":"<p>Adjust node or hub replicas by editing the <code>SeleniumGrid</code> spec:</p> <pre><code>spec:\n  nodes:\n    - browser: chrome\n      replicas: 10\n</code></pre> <p>Apply and the operator will handle the scaling automatically.</p>"},{"location":"quickstart/selenium-grid/#best-practices","title":"Best Practices","text":"Tip Description Use a dedicated namespace Keep Grid resources isolated (e.g., <code>browserbee-testing</code>) Update browser images regularly Stay current with browser features and security patches Monitor usage trends Use Grafana dashboards to right-size node counts Pin compatible image versions Ensure version consistency across test runs Use selectors or labels Group grids by environment, test suite, or CI branch"},{"location":"quickstart/selenium-grid/#related-resources","title":"\ud83d\udd17 Related Resources","text":"<ul> <li>Installing the Operator</li> <li>Declarative Test Workflows</li> </ul> <p>With BrowserBee, launching a multi-browser Selenium Grid is as simple as editing a YAML file.</p>"},{"location":"quickstart/selenium-hub/","title":"Selenium Hub","text":"<p>The Selenium Hub is the central component of a Selenium Grid. It acts as a server that manages test requests and routes them to the appropriate nodes for execution. The BrowserBee Selenium Operator simplifies the deployment and management of Selenium Hubs in Kubernetes environments.</p>"},{"location":"quickstart/selenium-hub/#features-of-selenium-hub","title":"Features of Selenium Hub","text":"<ul> <li>Centralized Management: Acts as the single point of contact for all test requests.</li> <li>Dynamic Routing: Routes test requests to the appropriate nodes based on browser and platform requirements.</li> <li>Scalability: Supports scaling to handle increased test loads.</li> <li>Monitoring: Provides a web interface to monitor the status of the grid.</li> </ul>"},{"location":"quickstart/selenium-hub/#deploying-a-selenium-hub","title":"Deploying a Selenium Hub","text":"<p>Follow these steps to deploy a Selenium Hub using the BrowserBee Selenium Operator:</p> <ol> <li> <p>Apply the Selenium Hub Custom Resource:</p> <p><code>bash kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/main/config/samples/selenium-hub_v1_seleniumhub.yaml</code></p> </li> <li> <p>Verify the Deployment:    Check the status of the Selenium Hub:</p> </li> </ol> <p><code>bash    kubectl get seleniumhubs</code></p> <ol> <li> <p>Access the Selenium Hub:     Retrieve the service URL for the Selenium Hub:</p> <p><code>bash kubectl get svc selenium-hub -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'</code></p> <p>Open the URL in your browser to access the Selenium Hub console.</p> </li> </ol>"},{"location":"quickstart/selenium-hub/#customizing-the-selenium-hub","title":"Customizing the Selenium Hub","text":"<p>You can customize the Selenium Hub by modifying the Custom Resource Definition (CRD). For example, you can specify the number of replicas and other configurations in the <code>spec</code> section of the CRD.</p> <p>Example:</p> <pre><code>apiVersion: selenium-hub.browserbee.io/v1\nkind: SeleniumHub\nmetadata:\n  name: custom-hub\nspec:\n  replicas: 2\n</code></pre> <p>Apply the updated configuration:</p> <pre><code>kubectl apply -f custom-hub.yaml\n</code></pre>"},{"location":"quickstart/selenium-hub/#monitoring-and-scaling","title":"Monitoring and Scaling","text":"<ul> <li>Monitoring: Use Prometheus and Grafana to monitor the performance and health of your Selenium Hub.</li> <li>Scaling: Adjust the number of replicas to scale your hub up or down based on demand.</li> </ul>"},{"location":"quickstart/selenium-hub/#best-practices","title":"Best Practices","text":"<ul> <li>Use a dedicated namespace for your Selenium Hub resources.</li> <li>Monitor resource usage to ensure optimal performance.</li> <li>Regularly update your Selenium Hub image to include the latest features and security patches.</li> </ul>"},{"location":"quickstart/selenium-node/","title":"Selenium Node","text":"<p>A Selenium Node is a component of Selenium Grid that executes tests. It connects to the Selenium Hub and receives test requests, running them in the specified browser environment. The BrowserBee Selenium Operator simplifies the deployment and management of Selenium Nodes in Kubernetes environments.</p>"},{"location":"quickstart/selenium-node/#features-of-selenium-node","title":"Features of Selenium Node","text":"<ul> <li>Browser Execution: Runs tests in browsers like Chrome, Firefox, and Edge.</li> <li>Parallel Execution: Supports running multiple tests simultaneously.</li> <li>Dynamic Scaling: Easily scale the number of nodes to match testing requirements.</li> <li>Integration with Hub: Seamlessly integrates with the Selenium Hub for test routing.</li> </ul>"},{"location":"quickstart/selenium-node/#deploying-a-selenium-node","title":"Deploying a Selenium Node","text":"<p>Follow these steps to deploy a Selenium Node using the BrowserBee Selenium Operator:</p> <ol> <li> <p>Apply the Selenium Node Custom Resource:</p> <p><code>bash kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/main/config/samples/selenium-node_v1_seleniumnode.yaml</code></p> </li> <li> <p>Verify the Deployment:    Check the status of the Selenium Node:</p> <p><code>bash kubectl get seleniumnodes</code></p> </li> <li> <p>Check Node Connectivity:    Ensure the Selenium Node is connected to the Selenium Hub:</p> </li> </ol> <pre><code>kubectl logs &lt;node-pod-name&gt;\n</code></pre> <p>Look for logs indicating successful connection to the hub.</p>"},{"location":"quickstart/selenium-node/#customizing-the-selenium-node","title":"Customizing the Selenium Node","text":"<p>You can customize the Selenium Node by modifying the Custom Resource Definition (CRD). For example, you can specify the browser type, number of replicas, and other configurations in the <code>spec</code> section of the CRD.</p> <p>Example:</p> <pre><code>apiVersion: selenium-node.browserbee.io/v1\nkind: SeleniumNode\nmetadata:\n  name: custom-node\nspec:\n  hubRef:\n    name: selenium-hub\n    namespace: default\n  browser: chrome\n  replicas: 3\n</code></pre> <p>Apply the updated configuration:</p> <pre><code>kubectl apply -f custom-node.yaml\n</code></pre>"},{"location":"quickstart/selenium-node/#monitoring-and-scaling","title":"Monitoring and Scaling","text":"<ul> <li>Monitoring: Use Prometheus and Grafana to monitor the performance and health of your Selenium Nodes.</li> <li>Scaling: Adjust the number of replicas to scale your nodes up or down based on demand.</li> </ul>"},{"location":"quickstart/selenium-node/#best-practices","title":"Best Practices","text":"<ul> <li>Use a dedicated namespace for your Selenium Node resources.</li> <li>Monitor resource usage to ensure optimal performance.</li> <li>Regularly update your Selenium Node image to include the latest features and security patches.</li> </ul>"},{"location":"quickstart/selenium-standalone/","title":"\ud83e\uddea Selenium Standalone","text":"<p>Selenium Standalone is a self-contained Selenium instance that runs both the Hub and Node in a single container. It\u2019s perfect for quick testing, local development, or small-scale automation workflows.</p> <p>\u2699\ufe0f Powered by the BrowserBee Selenium Operator, Standalone deployments are Kubernetes-native, declarative, and scalable.</p>"},{"location":"quickstart/selenium-standalone/#why-use-standalone-mode","title":"\ud83c\udfaf Why Use Standalone Mode?","text":"Scenario Benefit \ud83d\udd2c Local testing or CI jobs No need to set up a full Selenium Grid \ud83e\uddea Smoke or regression tests Fast spin-up and teardown \ud83e\uddf1 Simple workflows Reduced complexity, especially for demos"},{"location":"quickstart/selenium-standalone/#key-features","title":"\ud83c\udf1f Key Features","text":"<ul> <li>\ud83c\udfaf All-in-One: Hub and Node combined into one pod</li> <li>\ud83d\udee0 Easy to Configure: Declarative setup using CRDs</li> <li>\ud83c\udf0d Cross-Browser Ready: Works with Chrome, Firefox, and more</li> <li>\ud83d\udcc8 Scalable: Increase replicas to run tests in parallel</li> </ul>"},{"location":"quickstart/selenium-standalone/#deploying-selenium-standalone","title":"\ud83d\ude80 Deploying Selenium Standalone","text":""},{"location":"quickstart/selenium-standalone/#1-apply-a-sample-standalone-resource","title":"1. Apply a Sample Standalone Resource","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/browserbee/browserbee-selenium-operator/main/config/samples/selenium-standalone_v1_seleniumstandalone.yaml\n</code></pre> <p>This will create a minimal <code>SeleniumStandalone</code> resource and launch a pod with the default browser image.</p>"},{"location":"quickstart/selenium-standalone/#2-verify-the-deployment","title":"2. Verify the Deployment","text":"<p>Check that the instance is running:</p> <pre><code>kubectl get seleniumstandalones\n</code></pre> <p>You should see a resource named <code>selenium-standalone</code> or similar.</p>"},{"location":"quickstart/selenium-standalone/#3-access-the-console-ui","title":"3. Access the Console UI","text":"<p>Retrieve the exposed service URL:</p> <pre><code>kubectl get svc selenium-standalone -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'\n</code></pre> <p>Paste the URL in your browser to access the Selenium WebDriver Console.</p> <p>\ud83e\uddea Using Minikube or Kind? Try <code>kubectl port-forward</code> or set up an <code>Ingress</code>.</p>"},{"location":"quickstart/selenium-standalone/#customizing-the-standalone-instance","title":"\ud83d\udee0 Customizing the Standalone Instance","text":"<p>You can customize everything from browser type to replicas and environment variables via the CRD spec.</p>"},{"location":"quickstart/selenium-standalone/#example-chrome-standalone-with-3-replicas","title":"Example: Chrome Standalone with 3 Replicas","text":"<pre><code>apiVersion: selenium-standalone.browserbee.io/v1\nkind: SeleniumStandalone\nmetadata:\n  name: custom-standalone\nspec:\n  image: selenium/standalone-chrome\n  replicas: 3\n</code></pre> <p>Apply your custom config:</p> <pre><code>kubectl apply -f custom-standalone.yaml\n</code></pre> <p>\ud83d\udca1 Use the <code>image</code> field to swap in Firefox, Edge, or custom driver builds.</p>"},{"location":"quickstart/selenium-standalone/#monitoring-scaling","title":"\ud83d\udcca Monitoring &amp; \ud83d\udd01 Scaling","text":""},{"location":"quickstart/selenium-standalone/#monitoring","title":"\ud83d\udcc8 Monitoring","text":"<p>You can integrate Prometheus and Grafana to track:</p> <ul> <li>Pod health and readiness</li> <li>Browser session usage</li> <li>Resource consumption per test run</li> </ul> <p>Use Kubernetes-native metrics or expose <code>/metrics</code> via sidecars.</p>"},{"location":"quickstart/selenium-standalone/#scaling-the-standalone-instance","title":"\ud83d\udd3c Scaling the Standalone Instance","text":"<p>Update the number of replicas in your CR:</p> <pre><code>spec:\n  replicas: 5\n</code></pre> <p>The operator will automatically handle scaling the underlying Deployment.</p>"},{"location":"quickstart/selenium-standalone/#best-practices","title":"\u2705 Best Practices","text":"Practice Description Use a separate namespace e.g., <code>selenium-dev</code> or <code>standalone-ci</code> Pin versions Use a fixed image tag to avoid breaking changes Update images regularly Get the latest WebDriver, browser patches, and fixes Use limits/requests Prevent Standalone pods from consuming too many cluster resources Expose UI securely Add basic auth or use internal-only access for the console"},{"location":"quickstart/selenium-standalone/#related-pages","title":"\ud83d\udd17 Related Pages","text":"<ul> <li>\ud83e\udde9 Selenium Grid Overview</li> <li>\u2699\ufe0f Installation Guide</li> <li>\ud83e\uddea Writing Selenium Tests</li> </ul> <p>With BrowserBee, setting up a Selenium Standalone is as simple as applying a YAML. Perfect for quick tests, CI runs, or low-overhead test automation.</p>"},{"location":"quickstart/selenium-workflow/","title":"Selenium Workflow","text":"<p>The Selenium Workflow defines how to deploy, test, and scale Selenium infrastructure using the BrowserBee Selenium Operator. It empowers teams to run browser automation at scale \u2014 declaratively, reproducibly, and Kubernetes-native.</p>"},{"location":"quickstart/selenium-workflow/#workflow-overview","title":"Workflow Overview","text":"<p>The Selenium lifecycle consists of 4 key stages:</p> <ol> <li>Define: Use Kubernetes Custom Resources to describe your desired Selenium infrastructure</li> <li>Deploy: Apply CRs using <code>kubectl</code>, and the operator will provision everything for you</li> <li>Execute: Point your test framework to the Grid or Standalone endpoint and run tests</li> <li>Monitor &amp; Scale: Observe usage and scale as needed</li> </ol>"},{"location":"quickstart/selenium-workflow/#step-by-step-workflow","title":"Step-by-Step Workflow","text":""},{"location":"quickstart/selenium-workflow/#1-define-custom-resources","title":"1. Define Custom Resources","text":"<p>Start by defining the required Selenium components \u2014 Grid, Hub, Nodes, or Standalone \u2014 in YAML.</p>"},{"location":"quickstart/selenium-workflow/#example-selenium-grid","title":"Example: Selenium Grid","text":"<pre><code>apiVersion: selenium-grid.browserbee.io/v1\nkind: SeleniumGrid\nmetadata:\n  name: example-grid\nspec:\n  hub:\n    replicas: 1\n  nodes:\n    - browser: chrome\n      replicas: 2\n    - browser: firefox\n      replicas: 2\n</code></pre> <p>The operator reads this resource and provisions all necessary pods, services, and stateful sets.</p>"},{"location":"quickstart/selenium-workflow/#2-deploy-resources-to-kubernetes","title":"2. Deploy Resources to Kubernetes","text":"<p>Use <code>kubectl</code> to apply your custom resource to the cluster:</p> <pre><code>kubectl apply -f selenium-grid.yaml\n</code></pre> <p>Then verify it's running:</p> <pre><code>kubectl get seleniumgrids\n</code></pre> <p>If you\u2019re using Standalone:</p> <pre><code>kubectl get seleniumstandalones\n</code></pre>"},{"location":"quickstart/selenium-workflow/#3-run-selenium-tests","title":"3. Run Selenium Tests","text":"<p>Once your Selenium infrastructure is live, connect your tests to the exposed WebDriver endpoint.</p>"},{"location":"quickstart/selenium-workflow/#python-example-remote-webdriver","title":"Python Example (Remote WebDriver)","text":"<pre><code>from selenium import webdriver\n\noptions = webdriver.ChromeOptions()\ndriver = webdriver.Remote(\n    command_executor='http://&lt;selenium-hub-url&gt;:4444/wd/hub',\n    options=options\n)\n\ndriver.get(\"https://example.com\")\nprint(driver.title)\ndriver.quit()\n</code></pre> <p>\ud83e\uddea You can point to either the Selenium Hub (for Grids) or a Standalone service.</p> <p>Use <code>kubectl get svc</code> to fetch the external or internal URL of your Hub or Standalone:</p> <pre><code>kubectl get svc selenium-hub\nkubectl get svc selenium-standalone\n</code></pre>"},{"location":"quickstart/selenium-workflow/#4-monitor-scale","title":"4. Monitor &amp; Scale","text":""},{"location":"quickstart/selenium-workflow/#monitor-with-prometheus-grafana","title":"Monitor with Prometheus + Grafana","text":"<p>Track:</p> <ul> <li>Pod health</li> <li>Test session concurrency</li> <li>Resource utilization</li> <li>Node availability</li> </ul> <p>Use native Kubernetes metrics or expose <code>/metrics</code> with sidecars.</p>"},{"location":"quickstart/selenium-workflow/#scale-with-a-simple-edit","title":"Scale with a Simple Edit","text":"<p>Update your CR or use <code>kubectl scale</code>:</p> <pre><code>spec:\n  hub:\n    replicas: 3\n</code></pre> <p>Apply your changes:</p> <pre><code>kubectl apply -f selenium-grid.yaml\n</code></pre> <p>Or scale manually:</p> <pre><code>kubectl scale deployment selenium-hub --replicas=3\n</code></pre>"},{"location":"quickstart/selenium-workflow/#best-practices","title":"Best Practices","text":"Recommendation Benefit Use namespaces Isolate test environments and manage RBAC Pin image tags Avoid unexpected behavior from image updates Version your CRs in Git Enable GitOps workflows and review changes Integrate with CI/CD Automate test environment provisioning on each commit Monitor consistently Prevent overloading pods or stale sessions"},{"location":"quickstart/selenium-workflow/#compatible-components","title":"Compatible Components","text":"<p>You can use any of the following components in your workflow:</p> Component Use Case <code>SeleniumGrid</code> Full grid setup with Hub and Nodes <code>SeleniumHub</code> Central hub if using Nodes manually <code>SeleniumNode</code> Browser-specific workers <code>SeleniumStandalone</code> Quick testing and CI runs <code>SeleniumTest</code> Declarative test execution (YAML-driven)"},{"location":"quickstart/selenium-workflow/#related-resources","title":"Related Resources","text":"<ul> <li>Declarative Testing</li> <li>Installation Guide</li> <li>Create and Run a Test</li> </ul> <p>With BrowserBee, your entire Selenium workflow becomes declarative, version-controlled, and seamlessly integrated into Kubernetes and CI/CD.</p>"}]}